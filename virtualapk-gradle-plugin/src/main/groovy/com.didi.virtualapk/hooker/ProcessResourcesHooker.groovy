package com.didi.virtualapk.hooker

import com.android.build.gradle.AndroidConfig
import com.android.build.gradle.AppExtension
import com.android.build.gradle.api.ApkVariant
import com.android.build.gradle.tasks.ProcessAndroidResources
import com.android.sdklib.BuildToolInfo
import com.didi.virtualapk.aapt.Aapt
import com.didi.virtualapk.collector.ResourceCollector
import com.didi.virtualapk.collector.res.ResourceEntry
import com.didi.virtualapk.collector.res.StyleableEntry
import com.google.common.collect.ListMultimap
import com.google.common.io.Files
import org.gradle.api.Project
/**
 * Filter the host resources out of the plugin apk.
 * Modify the .arsc file to delete host element,
 * rearrange plugin element, hold the new resource IDs
 *
 * @author zhengtao
 */
class ProcessResourcesHooker extends GradleTaskHooker<ProcessAndroidResources> {

    /**
     * Collector to gather the sources and styleables
     */
    ResourceCollector resourceCollector
    /**
     * Android config information specified in build.gradle
     */
    AndroidConfig androidConfig

    ProcessResourcesHooker(Project project, ApkVariant apkVariant) {
        super(project, apkVariant)
        androidConfig = project.extensions.findByType(AppExtension)
    }

    @Override
    String getTaskName() {
        return "process${apkVariant.name.capitalize()}Resources"
    }

    @Override
    void beforeTaskExecute(ProcessAndroidResources aaptTask) {

    }

    /**
     * Since we need to remove the host resources and modify the resource ID,
     * we will reedit the AP_ file and repackage it after the task execute
     *
     * @param par Gradle task of process android resources
     */
    @Override
    void afterTaskExecute(ProcessAndroidResources par) {
        def apFile = par.packageOutputFile
        def resourcesDir = new File(apFile.parentFile, Files.getNameWithoutExtension(apFile.name))

        /*
         * Clean up resources merge directory
         */
        resourcesDir.deleteDir()

        /*
         * Unzip resources-${variant.name}.ap_
         */
        project.copy {
            from project.zipTree(apFile)
            into resourcesDir

            include 'AndroidManifest.xml'
            include 'resources.arsc'
            include 'res/**/*'
        }

        resourceCollector = new ResourceCollector(project, par)
        resourceCollector.collect()

        def retainedTypes = convertResourcesForAapt(resourceCollector.pluginResources)
        def retainedStylealbes = convertStyleablesForAapt(resourceCollector.pluginStyleables)
        def resIdMap = resourceCollector.resIdMap

        def rSymbolFile = new File(par.textSymbolOutputDir, 'R.txt')
        def libRefTable = ["${virtualApk.packageId}": par.packageForR]
        def filteredResources = [] as HashSet<String>
        def updatedResources = [] as HashSet<String>

        def aapt = new Aapt(resourcesDir, rSymbolFile, androidConfig.buildToolsRevision)

        //Delete host resources, must do it before filterPackage
        aapt.filterResources(retainedTypes, filteredResources)
        //Modify the arsc file, and replace ids of related xml files
        aapt.filterPackage(retainedTypes, retainedStylealbes, virtualApk.packageId, resIdMap, libRefTable, updatedResources)

        /*
         * Delete filtered entries and then add updated resources into resources-${variant.name}.ap_
         */
        com.didi.virtualapk.utils.ZipUtil.with(apFile).deleteAll(filteredResources + updatedResources)

        project.exec {
            executable par.buildTools.getPath(BuildToolInfo.PathId.AAPT)
            workingDir resourcesDir
            args 'add', apFile.path
            args updatedResources
            standardOutput = new ByteArrayOutputStream()
        }

        updateRJava(aapt, par.sourceOutputDir)
    }

    /**
     * Because the resource ID has changed, we need to regenerate the R.java file,
     * include the all resources R, plugin resources R, and R files of retained aars
     *
     * @param aapt Class to expand aapt function
     * @param sourceOutputDir Directory of R.java files generated by aapt
     *
     */
    def updateRJava(Aapt aapt, File sourceOutputDir) {

        sourceOutputDir.deleteDir()

        def rSourceFile = new File(sourceOutputDir, "${virtualApk.packagePath}${File.separator}R.java")
        aapt.generateRJava(rSourceFile, apkVariant.applicationId, resourceCollector.allResources, resourceCollector.allStyleables)

        def splitRSourceFile = new File(sourceOutputDir.parentFile, "va${File.separator}${virtualApk.packagePath}${File.separator}R.java")
        aapt.generateRJava(splitRSourceFile, apkVariant.applicationId, resourceCollector.pluginResources, resourceCollector.pluginStyleables)
        virtualApk.splitRJavaFile = splitRSourceFile

        virtualApk.retainedAarLibs.each {
            def aarPackage = it.package
            def rJavaFile = new File(sourceOutputDir, "${aarPackage.replace('.'.charAt(0), File.separatorChar)}${File.separator}R.java")
            aapt.generateRJava(rJavaFile, aarPackage, it.aarResources, it.aarStyleables)
        }
    }

    /**
     * We use the third party library to modify the ASRC file,
     * this method used to transform resource data into the structure of the library
     * @param pluginResources Map of plugin resources
     */
    def convertResourcesForAapt(ListMultimap<String, ResourceEntry> pluginResources) {
        def retainedTypes = []
        retainedTypes.add(0,  [name : 'placeholder', id : Aapt.ID_NO_ATTR, entries: []])//attr 占位

        pluginResources.keySet().each { resType ->
            def firstEntry = pluginResources.get(resType).get(0)
            def typeEntry = [ type: "int", name: resType,
                              id: parseTypeIdFromResId(firstEntry.resourceId),
                              _id: parseTypeIdFromResId(firstEntry.newResourceId),
                              entries: []]

            pluginResources.get(resType).each { resEntry ->
                typeEntry.entries.add([
                        name : resEntry.resourceName,
                        id : parseEntryIdFromResId(resEntry.resourceId),
                        _id: parseEntryIdFromResId(resEntry.newResourceId),
                        v : resEntry.resourceId, _v : resEntry.newResourceId,
                        vs: resEntry.hexResourceId, _vs : resEntry.hexNewResourceId])
            }

            if (resType == 'attr') {
                retainedTypes.set(0, typeEntry)
            } else {
                retainedTypes.add(typeEntry)
            }
        }

        return retainedTypes
    }

    /**
     * Transform styleable data into the structure of the aapt library
     * @param pluginStyleables Map of plugin styleables
     */
    def convertStyleablesForAapt(List<StyleableEntry> pluginStyleables) {
        def retainedStyleables = []
        pluginStyleables.each { styleableEntry ->
            retainedStyleables.add([vtype : styleableEntry.valueType,
                                    type : 'styleable',
                                    key : styleableEntry.name,
                                    idStr : styleableEntry.value])
        }
        return retainedStyleables
    }

    /**
     * Parse the type part of a android resource id
     */
    def parseTypeIdFromResId(int resourceId) {
        resourceId >> 16 & 0xFF
    }

    /**
     * Parse the entry part of a android resource id
     */
    def parseEntryIdFromResId(int resourceId) {
        resourceId & 0xFFFF
    }

}